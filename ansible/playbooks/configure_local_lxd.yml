---
- name: Configure local LXD to interact with remote cluster
  hosts: localhost
  connection: local
  vars:
    lxd_cluster_password: "{{ hostvars['pi']['lxd_cluster_password'] }}"
    bootstrap_address: "{{ hostvars['pi']['bootstrap_address'] }}"
    ansible_user: "{{ hostvars['pi']['ansible_user'] }}"
    lxd_cluster_name: "{{ hostvars['pi']['lxd_cluster_name'] }}"

  tasks:
    - name: Copy cluster certificate from bootstrap node to local machine
      local_action:
        module: command
        cmd: >
          scp {{ ansible_user }}@{{ bootstrap_address }}:/var/snap/lxd/common/lxd/cluster.crt /tmp/bootstrap_cluster.crt
      ignore_errors: yes
      register: scp_result
      become: yes

    - name: Fail if cluster certificate is not found
      fail:
        msg: "Cluster certificate not found on the bootstrap node. Ensure the LXD cluster is initialized correctly."
      when: scp_result.failed

    - name: Check if remote exists
      shell: lxc remote list | grep "{{ lxd_cluster_name }}"
      ignore_errors: yes
      register: remote_check
      become: no

    - name: Change default LXC remote to local
      shell: lxc remote switch local
      ignore_errors: yes

    - name: Remove existing remote if it exists
      shell: lxc remote remove {{ lxd_cluster_name }}
      when: remote_check.rc == 0
      ignore_errors: yes
      become: no

    - name: Add remote cluster to local LXD
      shell: |
        echo "{{ lookup('file', '/tmp/bootstrap_cluster.crt') }}" | lxc remote add {{ lxd_cluster_name }} {{ bootstrap_address }} --accept-certificate --password={{ lxd_cluster_password }}
      environment:
        LXD_CLUSTER_PASSWORD: "{{ lxd_cluster_password }}"
      args:
        executable: /bin/bash
      become: no

    - name: Debug LXD remote list after adding
      shell: lxc remote list
      register: remote_list
      become: no

    - name: Set lxc remote as default
      shell: lxc remote switch {{ lxd_cluster_name }}
      become: no

    - name: Display LXD remote list
      debug:
        var: remote_list.stdout_lines
      become: no












